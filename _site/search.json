[
  {
    "objectID": "ML_notebook.html",
    "href": "ML_notebook.html",
    "title": "End-to-End Machine Learning Workflow",
    "section": "",
    "text": "In this project we used specific versions of the libraries. Save the following libraries in a text file- requirements.txt. Install all these libraries using the code python -r pip install requirements.txt.\njoblib==1.3.2\nstreamlit==1.31.1\nscikit-learn==1.2.2\npandas==2.0.0"
  },
  {
    "objectID": "ML_notebook.html#set-up-ml-environment",
    "href": "ML_notebook.html#set-up-ml-environment",
    "title": "End-to-End Machine Learning Workflow",
    "section": "",
    "text": "In this project we used specific versions of the libraries. Save the following libraries in a text file- requirements.txt. Install all these libraries using the code python -r pip install requirements.txt.\njoblib==1.3.2\nstreamlit==1.31.1\nscikit-learn==1.2.2\npandas==2.0.0"
  },
  {
    "objectID": "ML_notebook.html#end-to-end-machine-learning-project-classifying-the-iris-dataset",
    "href": "ML_notebook.html#end-to-end-machine-learning-project-classifying-the-iris-dataset",
    "title": "End-to-End Machine Learning Workflow",
    "section": "End-to-End Machine Learning Project: Classifying the Iris Dataset",
    "text": "End-to-End Machine Learning Project: Classifying the Iris Dataset\nIn this project, we will walk through an end-to-end machine learning task using the Iris dataset. This comprehensive exercise will cover all stages of a machine learning pipeline, from data exploration to model deployment."
  },
  {
    "objectID": "ML_notebook.html#introduction-to-the-dataset",
    "href": "ML_notebook.html#introduction-to-the-dataset",
    "title": "End-to-End Machine Learning Workflow",
    "section": "1. Introduction to the Dataset",
    "text": "1. Introduction to the Dataset\nThe Iris dataset is a classic dataset in machine learning, widely used for benchmarking classification algorithms. It consists of measurements from 150 iris flowers, with four features- Sepal Length, Sepal Width, Petal Length, and Petal Width. Each sample is labeled with one of three species- Iris-setosa, Iris-versicolor, and Iris-virginica."
  },
  {
    "objectID": "ML_notebook.html#objective",
    "href": "ML_notebook.html#objective",
    "title": "End-to-End Machine Learning Workflow",
    "section": "2. Objective",
    "text": "2. Objective\nOur objective is to build a classification model that can accurately predict the species of an iris flower based on its measurements. We will explore the dataset, perform necessary preprocessing, and select an appropriate classification algorithm to achieve this goal."
  },
  {
    "objectID": "ML_notebook.html#data-exploration-and-preprocessing",
    "href": "ML_notebook.html#data-exploration-and-preprocessing",
    "title": "End-to-End Machine Learning Workflow",
    "section": "3. Data Exploration and Preprocessing",
    "text": "3. Data Exploration and Preprocessing\n\nExploratory Data Analysis (EDA): We will begin by analyzing the dataset to understand its structure and characteristics. This includes visualizing distributions, checking for missing values, and examining class balance.\n\nIn this stage we need to load the dataset using appropriate python libraries. We want to follow a systematic approach to understand the dataset’s structure, clean the data, and gain insights. Here’s a step-by-step procedure for EDA using Python. As the first step let’s load necessary python libraries for this job.\n\n\nCode\n# loading necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n\n\nCode\n# used to supress warning\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\nIn this EDA process, libraries such as pandas, seaborn, matplotlib, and scikit-learn are essential. Pandas is used for efficient data manipulation and preprocessing, allowing us to load, clean, and manage the dataset seamlessly. Seaborn and matplotlib provide advanced visualization capabilities to explore the distribution, outliers, and relationships among features, which are crucial for understanding the dataset’s structure and potential issues. Together, these libraries offer a comprehensive toolkit for conducting thorough exploratory data analysis, ensuring that the dataset is well-understood and ready for subsequent modeling.\nIn the next step, we load the Iris dataset directly from a remote URL using pandas. The code iris_df = pd.read_csv('https://raw.githubusercontent.com/sijuswamy/Model_Deployment/main/iris.csv') reads the CSV file from the specified GitHub repository and creates a DataFrame named iris_df, which contains the dataset for further analysis.\n\n\nCode\n# loading dataset\niris_df=pd.read_csv('https://raw.githubusercontent.com/sijuswamy/Model_Deployment/main/iris.csv')\n\n\nViewing the beggining Dataset: The code iris_df.head() displays the first five rows of the iris_df DataFrame, providing a quick overview of the dataset’s structure and the initial entries. We just visualize first 5 samples in the dataset as a table.\n\n\nCode\niris_df.head()\n\n\n\n\n\n\n\n\n\nsepal.length\nsepal.width\npetal.length\npetal.width\nvariety\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nSetosa\n\n\n1\n4.9\n3.0\n1.4\n0.2\nSetosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nSetosa\n\n\n3\n4.6\n3.1\n1.5\n0.2\nSetosa\n\n\n4\n5.0\n3.6\n1.4\n0.2\nSetosa\n\n\n\n\n\n\n\nViewing the End of the Dataset: The code iris_df.tail() displays the last five rows of the iris_df DataFrame, offering insight into the final entries and the dataset’s structure at its end.\n\n\nCode\niris_df.tail()\n\n\n\n\n\n\n\n\n\nsepal.length\nsepal.width\npetal.length\npetal.width\nvariety\n\n\n\n\n145\n6.7\n3.0\n5.2\n2.3\nVirginica\n\n\n146\n6.3\n2.5\n5.0\n1.9\nVirginica\n\n\n147\n6.5\n3.0\n5.2\n2.0\nVirginica\n\n\n148\n6.2\n3.4\n5.4\n2.3\nVirginica\n\n\n149\n5.9\n3.0\n5.1\n1.8\nVirginica\n\n\n\n\n\n\n\nChecking the Dataset Shape: The code iris_df.shape returns a tuple representing the dimensions of the iris_df DataFrame, indicating the number of rows and columns in the dataset.\n\n\nCode\niris_df.shape\n\n\n(150, 5)\n\n\nViewing Column Names: The code iris_df.columns displays the names of all columns in the iris_df DataFrame, providing an overview of the dataset’s features and attributes.\n\n\nCode\niris_df.columns\n\n\nIndex(['sepal.length', 'sepal.width', 'petal.length', 'petal.width',\n       'variety'],\n      dtype='object')\n\n\nDataset Information: The code iris_df.info() provides a summary of the iris_df DataFrame, including the number of non-null entries, data types of each column, and memory usage, which helps assess the completeness and structure of the dataset.\n\n\nCode\niris_df.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 150 entries, 0 to 149\nData columns (total 5 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   sepal.length  150 non-null    float64\n 1   sepal.width   150 non-null    float64\n 2   petal.length  150 non-null    float64\n 3   petal.width   150 non-null    float64\n 4   variety       150 non-null    object \ndtypes: float64(4), object(1)\nmemory usage: 6.0+ KB\n\n\nStatistical Summary: The code iris_df.describe(include='all') generates a comprehensive summary of the iris_df DataFrame, including statistics for all columns, such as count, unique values, top frequency, and mean, which provides insights into the distribution and characteristics of the dataset.\n\n\nCode\niris_df.describe(include='all')\n\n\n\n\n\n\n\n\n\nsepal.length\nsepal.width\npetal.length\npetal.width\nvariety\n\n\n\n\ncount\n150.000000\n150.000000\n150.000000\n150.000000\n150\n\n\nunique\nNaN\nNaN\nNaN\nNaN\n3\n\n\ntop\nNaN\nNaN\nNaN\nNaN\nSetosa\n\n\nfreq\nNaN\nNaN\nNaN\nNaN\n50\n\n\nmean\n5.843333\n3.057333\n3.758000\n1.199333\nNaN\n\n\nstd\n0.828066\n0.435866\n1.765298\n0.762238\nNaN\n\n\nmin\n4.300000\n2.000000\n1.000000\n0.100000\nNaN\n\n\n25%\n5.100000\n2.800000\n1.600000\n0.300000\nNaN\n\n\n50%\n5.800000\n3.000000\n4.350000\n1.300000\nNaN\n\n\n75%\n6.400000\n3.300000\n5.100000\n1.800000\nNaN\n\n\nmax\n7.900000\n4.400000\n6.900000\n2.500000\nNaN\n\n\n\n\n\n\n\nThese basic pandas functions are most important for understand the data well. Now move on to the next level of data preparation namely Data Cleaning."
  },
  {
    "objectID": "ML_notebook.html#a-data-cleaning",
    "href": "ML_notebook.html#a-data-cleaning",
    "title": "End-to-End Machine Learning Workflow",
    "section": "3.a Data cleaning",
    "text": "3.a Data cleaning\n\nData Cleaning: We will handle any missing values and ensure the data is ready for modeling. Basic preprocessing tasks will include feature scaling and normalization. Various steps in this stage is explained below.\n\nChecking for Duplicates: The code iris_df.duplicated().sum() counts the number of duplicate rows in the iris_df DataFrame, helping identify any redundancy in the dataset that may need to be addressed.\n\n\nCode\nprint(iris_df.duplicated().sum())\n\n\n1\n\n\n\n\n\n\n\n\nTip\n\n\n\nChecking for duplicates is important because duplicate rows can skew analysis, introduce bias, and affect the performance of machine learning models. By identifying and removing duplicates, we ensure that each observation is unique and that the dataset accurately represents the underlying data without redundancy.\n\n\nIdentifying Duplicate Rows: The code iris_df[iris_df.duplicated()] filters and displays the duplicate rows in the iris_df DataFrame, allowing us to inspect and address any redundancy in the dataset by showing which rows are duplicated.\n\n\nCode\niris_df[iris_df.duplicated()]\n\n\n\n\n\n\n\n\n\nsepal.length\nsepal.width\npetal.length\npetal.width\nvariety\n\n\n\n\n142\n5.8\n2.7\n5.1\n1.9\nVirginica\n\n\n\n\n\n\n\nChecking Class Distribution and Data Imbalance: The code iris_df['variety'].value_counts() counts the number of occurrences of each unique value in the variety column of the iris_df DataFrame, providing insight into the distribution of classes and helping to identify any class imbalances in the dataset.\n\n\nCode\niris_df['variety'].value_counts()\n\n\nvariety\nSetosa        50\nVersicolor    50\nVirginica     50\nName: count, dtype: int64\n\n\n\n\n\n\n\n\nCaution\n\n\n\nAn imbalanced dataset, where some classes are significantly underrepresented compared to others, can lead to biased model performance. It may cause the model to favor the majority class, resulting in poor predictive accuracy for the minority class and skewed evaluation metrics. Addressing class imbalance ensures that the model learns to generalize across all classes effectively, leading to more reliable and fair predictions.\n\n\nChecking for Missing Values: The code iris_df.isnull().sum(axis=0)calculates the number of missing values for each column in theiris_df` DataFrame, helping to identify and address any gaps in the dataset that may need to be handled before analysis or modeling.\n\n\nCode\niris_df.isnull().sum(axis=0)\n\n\nsepal.length    0\nsepal.width     0\npetal.length    0\npetal.width     0\nvariety         0\ndtype: int64\n\n\nChecking for missing values is essential because missing data can compromise the integrity of the analysis and modeling process. By identifying columns with missing values, we can take appropriate steps to handle them—such as imputation or removal—ensuring that the dataset is complete and reliable for generating accurate insights and predictions.\nStatistical summary: Checking skewness, kurtosis, and correlation is essential for understanding data distribution and feature relationships. Skewness measures asymmetry; values between -0.5 and 0.5 indicate a fairly normal distribution, while values beyond this range suggest significant skewness. Kurtosis assesses the heaviness of tails; values close to 3 indicate a normal distribution, while values much higher or lower suggest the presence or absence of outliers, respectively. Correlation examines feature relationships, with values close to 1 or -1 indicating strong correlations that could lead to multicollinearity. Analyzing these metrics helps in identifying data transformation needs, managing outliers, and optimizing feature selection, ultimately improving model performance and reliability. Before performing the statistical operations, check for the categorical variables. If so remove them and apply statistical operations on that pruned dataset. The following code will do that.\n\n\nCode\n# Check if 'variety' column exists in the DataFrame\nif 'variety' in iris_df.columns:\n    removed_col = iris_df[\"variety\"]\n    iris_num = iris_df.drop('variety', axis=1)  # Use drop to remove the column and keep the rest\n    print(\"Successfully removed 'variety' column.\")\nelse:\n    print(\"Column 'variety' not found in the DataFrame.\")\n\n\nSuccessfully removed 'variety' column."
  },
  {
    "objectID": "ML_notebook.html#b-statistical-summary--skewness-kurtosis-and-correlation",
    "href": "ML_notebook.html#b-statistical-summary--skewness-kurtosis-and-correlation",
    "title": "End-to-End Machine Learning Workflow",
    "section": "3.b Statistical Summary- Skewness, Kurtosis and Correlation",
    "text": "3.b Statistical Summary- Skewness, Kurtosis and Correlation\nChecking Skewness: The code iris_num.skew() calculates the skewness of each numeric column in the iris_num DataFrame, providing insights into the asymmetry of the data distribution. Skewness values between -0.5 and 0.5 suggest a relatively normal distribution, while values outside this range indicate potential skewness that may require transformation for better modeling.\n\n\nCode\niris_num.skew()\n\n\nsepal.length    0.314911\nsepal.width     0.318966\npetal.length   -0.274884\npetal.width    -0.102967\ndtype: float64\n\n\nChecking Kurtosis: The code iris_num.kurt() calculates the kurtosis of each numeric column in the iris_num DataFrame, which measures the “tailedness” of the data distribution. Values close to 3 suggest a distribution similar to the normal distribution, while values significantly higher or lower indicate heavy or light tails, respectively, which may point to the presence of outliers or a lack thereof.\n\n\nCode\niris_num.kurt()\n\n\nsepal.length   -0.552064\nsepal.width     0.228249\npetal.length   -1.402103\npetal.width    -1.340604\ndtype: float64"
  },
  {
    "objectID": "ML_notebook.html#c-exploratory-data-analysis",
    "href": "ML_notebook.html#c-exploratory-data-analysis",
    "title": "End-to-End Machine Learning Workflow",
    "section": "3.c Exploratory Data Analysis",
    "text": "3.c Exploratory Data Analysis\nIn this section we will perform various graphical analysis of features over the classes of target.\nVisualizing Class Distribution: The code print(iris_df[‘variety’].value_counts()) prints the count of each unique value in the variety column, showing the distribution of classes in the dataset. The sns.countplot(iris_df[‘variety’]) function from Seaborn creates a count plot to visually represent the distribution of classes, helping to easily identify any class imbalances or differences in class frequencies.\n\n\nCode\nprint(iris_df['variety'].value_counts())\n\n\nvariety\nSetosa        50\nVersicolor    50\nVirginica     50\nName: count, dtype: int64\n\n\nVisualizing Sepal Dimensions: The code plt.title('Comparison between sepal width and length') sets the title for the plot, while sns.scatterplot(x=iris_df['sepal.length'], y=iris_df['sepal.width']) creates a scatter plot using Seaborn to visualize the relationship between sepal length and sepal width. This visualization helps in understanding the correlation between these two features and identifying any patterns or trends in the data.\n\n\nCode\nplt.figure(figsize=(6,5))\nplt.title('Comparison between sepal width and length')\nsns.scatterplot(x=iris_df['sepal.length'], y=iris_df['sepal.width']);\n\n\n\n\n\n\n\n\n\nEnhanced Scatter Plot with Species: The code plt.figure(figsize=(16,9)) sets the size of the plot, and plt.title('Comparison between sepal width and length on the basis of species') adds a title to the plot. The sns.scatterplot(x=iris_df['sepal.length'], y=iris_df['sepal.width'], hue=iris_df['variety'], s=50) function creates a scatter plot where each point represents sepal length and width, with different colors indicating different species. This visualization helps in comparing the sepal dimensions across species and identifying patterns or clusters in the data. The plt.show() command displays the plot.\nVisualizing Petal Dimensions: The code plt.title('Comparison between petal width and length') sets the title for the plot, while sns.scatterplot(x=iris_df['petal.length'], y=iris_df['petal.width']) creates a scatter plot using Seaborn to visualize the relationship between petal length and petal width. This plot helps in examining the correlation between these two features and understanding how they vary with each other in the dataset.\n\n\nCode\nplt.figure(figsize=(6,5))\nplt.title('Comparison between petal width and length')\nsns.scatterplot(x=iris_df['petal.length'], y=iris_df['petal.width']);\n\n\n\n\n\n\n\n\n\nEnhanced Scatter Plot with Species for Petal Dimensions: The code plt.figure(figsize=(10,9)) sets the size of the plot, and plt.title('Comparison between Petal width and length on the basis of species') adds a title. The sns.scatterplot(x=iris_df['petal.length'], y=iris_df['petal.width'], hue=iris_df['variety'], s=50) function creates a scatter plot where petal length and width are plotted with different colors representing species. This visualization facilitates comparison of petal dimensions across different species, helping to identify patterns or clusters. The plt.show() command displays the plot.\n\n\nCode\nplt.figure(figsize=(6,5))\nplt.title('Comparison between Petal width and length on the basis of species')\nsns.scatterplot(x=iris_df['petal.length'], y=iris_df['petal.width'], hue = iris_df['variety'], s= 50);\nplt.show()\n\n\n\n\n\n\n\n\n\nFrom the above visualizations, we can tell that the iris-setosa species has smaller sepal length but higher width. While we see Versicolor lies in almost middle for length as well as width. While Virginica has larger sepal lengths and smaller sepal widths. We can see two separate clusters but not sure about the species so let’s bring the species into the equation as well.\nWe see that setosa has the smallest petal length as well as petal widths, while Versicolor has average petal length and petal width while the virginica species has the highest petal length as well as petal width.\nNow let’s visualize all the columns relationship using pair plots.\n\n\nCode\nplt.figure(figsize=(6,5))\nsns.pairplot(iris_df,hue=\"variety\",height=3);\n\n\n&lt;Figure size 576x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\nSummary of EDA: Pair plot represents the relationship between our target and the variables. We can see that the setosa species has a large difference in its characteristics when compared to the other species, it has smaller petal width and length while its sepal width is high and its sepal length is low. Similar kind of conclusions can be drawn for the other species like the Versicolor species usually have average dimensions whether it is sepal or pedal. While virginica has high pedal width and length while it has small sepal width but large sepal length. Also it is noted that Petal length and petal width are the most suitable features to classify the iris flowers in to its different varities.\nCalculating Feature Correlation: The code iris_num.corr() computes the correlation matrix for the numeric columns in the iris_num DataFrame. This matrix shows the pairwise correlation coefficients between features, helping to identify linear relationships and dependencies among them, which can be crucial for feature selection and understanding multicollinearity in the dataset.\niris_num.corr()\nA visual representation of the correlation matrix is shown below.\n\n\nCode\nfig = plt.figure(figsize = (6,5))\nsns.heatmap(iris_num.corr(), cmap='Blues', annot = True);\n\n\n\n\n\n\n\n\n\nFrom the above heatmap, we see that petal length and petal width have a high correlation, petal width and sepal length have good correlation as well as petal length and sepal length have good correlations.\nFrequency distribution of feature set: Let’s see the distribution of data for the various columns of our data set.\n\n\nCode\nfig, axes = plt.subplots(2, 2, figsize=(6,5))\naxes[0,0].set_title(\"Distribution of Sepal Width\")\naxes[0,0].hist(iris_df['sepal.width'], bins=5);\naxes[0,1].set_title(\"Distribution of Sepal Length\")\naxes[0,1].hist(iris_df['sepal.length'], bins=7);\naxes[1,0].set_title(\"Distribution of Petal Width\")\naxes[1,0].hist(iris_df['petal.width'], bins=5);\naxes[1,1].set_title(\"Distribution of Petal Length\")\naxes[1,1].hist(iris_df['petal.length'], bins=6);"
  },
  {
    "objectID": "ML_notebook.html#d-univariate-feature-analysis",
    "href": "ML_notebook.html#d-univariate-feature-analysis",
    "title": "End-to-End Machine Learning Workflow",
    "section": "3.d Univariate Feature Analysis",
    "text": "3.d Univariate Feature Analysis\n\n\nCode\nsns.FacetGrid(iris_df,hue=\"variety\",height=5).map(sns.distplot,\"petal.length\").add_legend();\n\n\n\n\n\n\n\n\n\nUnivariate feature analysis: The code sns.FacetGrid(iris_df, hue=“variety”, height=5).map(sns.distplot, “petal.width”).add_legend() creates a FacetGrid using Seaborn library to visualize the distribution of petal.width across different species in the iris_df DataFrame. The hue=“variety” parameter ensures that the distribution plots are colored according to the species, while height=5 sets the size of the plots. This visualization helps in analyzing the distribution and density of the petal width feature for each species, providing insights into how this feature varies across different classes.\n\n\nCode\nsns.FacetGrid(iris_df,hue=\"variety\",height=5).map(sns.distplot,\"petal.width\").add_legend();\n\n\n\n\n\n\n\n\n\n\n\nCode\nsns.FacetGrid(iris_df,hue=\"variety\",height=5).map(sns.distplot,\"sepal.length\").add_legend();\n\n\n\n\n\n\n\n\n\n\n\nCode\nsns.FacetGrid(iris_df,hue=\"variety\",height=5).map(sns.distplot,\"sepal.width\").add_legend();"
  },
  {
    "objectID": "ML_notebook.html#e-statistical-feature-analysis",
    "href": "ML_notebook.html#e-statistical-feature-analysis",
    "title": "End-to-End Machine Learning Workflow",
    "section": "3.e Statistical Feature Analysis",
    "text": "3.e Statistical Feature Analysis\nIn this section various features are analysed in more detail. Presence of outlair and normality of feature distribution will be checked before ML model building.\nBoxplots for Feature Analysis: The code fig, axes = plt.subplots(2, 2, figsize=(16,9)) creates a 2x2 grid of subplots with a figure size of 16x9 inches. Each sns.boxplot() function call plots the distribution of a specific feature (petal.width, petal.length, sepal.length, sepal.width) against the variety of the iris species. The orient=‘v’ parameter specifies vertical boxplots. This visualization helps in comparing the distributions of different features across species, highlighting differences in feature ranges, central tendencies, and potential outliers. The plt.show() command displays all the plots.\n\n\nCode\nfig, axes = plt.subplots(2, 2, figsize=(6,5))\nsns.boxplot(  y=\"petal.width\", x= \"variety\", data=iris_df,  orient='v' , ax=axes[0, 0])\nsns.boxplot(  y=\"petal.length\", x= \"variety\", data=iris_df,  orient='v' , ax=axes[0, 1])\nsns.boxplot(  y=\"sepal.length\", x= \"variety\", data=iris_df,  orient='v' , ax=axes[1, 0])\nsns.boxplot(  y=\"sepal.width\", x= \"variety\", data=iris_df,  orient='v' , ax=axes[1, 1])\nplt.show()\n\n\n\n\n\n\n\n\n\nThe box plots describe that:\n\nThe setosa usually has smaller features with few outliers.\nThe Versicolor species has average features\nThe virginica species has the longest features widths and lengths as compared to others.\n\nWe can further see the distributions using the violin plot on our dataset\n\n\nCode\nfig, axes = plt.subplots(2, 2, figsize=(6,5))\nsns.violinplot(y=\"petal.width\", x= \"variety\", data=iris_df,  orient='v' , ax=axes[0, 0])\nsns.violinplot(y=\"petal.length\", x= \"variety\", data=iris_df,  orient='v' , ax=axes[0, 1])\nsns.violinplot(y=\"sepal.length\", x= \"variety\", data=iris_df,  orient='v' , ax=axes[1, 0])\nsns.violinplot(y=\"sepal.length\", x= \"variety\", data=iris_df,  orient='v' , ax=axes[1, 1])\nplt.show()\n\n\n\n\n\n\n\n\n\nThe kernel density of the data along with the full distribution of the data is shown through the violin plots. We can see the probability density of the various features. Inshort, even the basic EDA give us deeper insight about the data and give hints for classification/ regression models on feature sets."
  },
  {
    "objectID": "ML_notebook.html#logistic-regression",
    "href": "ML_notebook.html#logistic-regression",
    "title": "End-to-End Machine Learning Workflow",
    "section": "1. Logistic Regression",
    "text": "1. Logistic Regression\nLogistic Regression is a simple yet effective classification algorithm that models the probability of a class label based on input features. It’s suitable for binary and multiclass classification problems and works well when the relationship between features and target is approximately linear."
  },
  {
    "objectID": "ML_notebook.html#k-nearest-neighbors-k-nn",
    "href": "ML_notebook.html#k-nearest-neighbors-k-nn",
    "title": "End-to-End Machine Learning Workflow",
    "section": "2. k-Nearest Neighbors (k-NN)",
    "text": "2. k-Nearest Neighbors (k-NN)\nk-Nearest Neighbors is a non-parametric method used for classification. It works by finding the k nearest data points to a given point and assigning the class that is most common among these neighbors. It is effective for datasets where the decision boundary is non-linear."
  },
  {
    "objectID": "ML_notebook.html#support-vector-machine-svm",
    "href": "ML_notebook.html#support-vector-machine-svm",
    "title": "End-to-End Machine Learning Workflow",
    "section": "3. Support Vector Machine (SVM)",
    "text": "3. Support Vector Machine (SVM)\nSupport Vector Machine is a powerful classification technique that works by finding the hyperplane that best separates the classes in the feature space. It is well-suited for datasets with a clear margin of separation and can handle both linear and non-linear classification tasks using kernel tricks."
  },
  {
    "objectID": "ML_notebook.html#decision-tree",
    "href": "ML_notebook.html#decision-tree",
    "title": "End-to-End Machine Learning Workflow",
    "section": "4. Decision Tree",
    "text": "4. Decision Tree\nDecision Tree is a model that splits the data into subsets based on the value of input features, creating a tree-like structure of decisions. It is useful for handling both categorical and numerical data and provides a clear model interpretability."
  },
  {
    "objectID": "ML_notebook.html#random-forest",
    "href": "ML_notebook.html#random-forest",
    "title": "End-to-End Machine Learning Workflow",
    "section": "5. Random Forest",
    "text": "5. Random Forest\nRandom Forest is an ensemble method that combines multiple decision trees to improve classification performance. It reduces overfitting and improves accuracy by averaging the predictions from multiple trees, making it robust and effective for complex datasets."
  },
  {
    "objectID": "ML_notebook.html#importing-required-libraries",
    "href": "ML_notebook.html#importing-required-libraries",
    "title": "End-to-End Machine Learning Workflow",
    "section": "Importing Required Libraries",
    "text": "Importing Required Libraries\nTo perform machine learning tasks and evaluate model performance, the following libraries are imported:\n\n\nCode\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\nfrom sklearn.model_selection import train_test_split\nimport joblib\n\n\n\naccuracy_score from sklearn.metrics: This function is used to compute the accuracy of the classification model by comparing the predicted labels to the true labels in the test set.\ntrain_test_split from sklearn.model_selection: This function is used to split the dataset into training and testing subsets, ensuring that the model is trained on one portion of the data and evaluated on a separate portion.\njoblib: This library is used for saving and loading Python objects efficiently, particularly for persisting trained models for future use. In the next immediate step, we resample and split the dataset for training and testing. This can be done as follows:\n\n\n\nCode\n# random seed\nseed = 42\niris_df.sample(frac=1, random_state=seed)\n\n# selecting features and target data\nX = iris_df[['sepal.length',    'sepal.width',  'petal.length', 'petal.width']]\ny = iris_df[['variety']]\n\n# split data into train and test sets\n# 70% training and 30% test\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.3, random_state=seed, stratify=y)\n\n\nIn the next section, we will create instances of all the above mentioned classification algorithms one by one."
  },
  {
    "objectID": "ML_notebook.html#logistic-regression-1",
    "href": "ML_notebook.html#logistic-regression-1",
    "title": "End-to-End Machine Learning Workflow",
    "section": "1. Logistic Regression",
    "text": "1. Logistic Regression\nTo Train and Evaluate the Logistic Regression Model, follow these steps.\nStep -1: Import Required Libraries Here we need only the LogisticRegression instance from the sklearn library. This can be done as follows.\n\n\nCode\nfrom sklearn.linear_model import LogisticRegression\n\n\nStep-2: Initialize the Model\nCreate an instance of the Logistic Regression model:\n\n\nCode\nmodel = LogisticRegression(max_iter=200)\n\n\nStep-3” 3. Train the Model\nFit the model to the training data:\n\n\nCode\nmodel.fit(X_train, y_train.values.ravel())\n\n\nLogisticRegression(max_iter=200)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  LogisticRegression?Documentation for LogisticRegressioniFittedLogisticRegression(max_iter=200) \n\n\nStep-4: Make Predictions\nUse the trained model to predict the labels for the test set:\n\n\nCode\ny_pred = model.predict(X_test)\n\n\nStep-5 Evaluate the Model\nAssess the model’s performance using confussion matrix, model accuracy and a detailed classification report:\n\n\nCode\n# Calculate accuracy\naccuracy = accuracy_score(y_test, y_pred)\n# Generate confusion matrix\nconf_matrix = confusion_matrix(y_test, y_pred)\n# Generate classification report\nreport = classification_report(y_test, y_pred)\n\n\n\n\nCode\n# Plot confusion matrix as a heatmap\nplt.figure(figsize=(6,5))\nsns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=y.columns, yticklabels=y.columns)\nplt.title('Confusion Matrix')\nplt.xlabel('Predicted Labels')\nplt.ylabel('True Labels')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\nprint(f\"Accuracy: {accuracy:.2f}\")\nprint(\"Classification Report:\")\nprint(report)\n\n\nAccuracy: 0.93\nClassification Report:\n              precision    recall  f1-score   support\n\n      Setosa       1.00      1.00      1.00        15\n  Versicolor       0.88      0.93      0.90        15\n   Virginica       0.93      0.87      0.90        15\n\n    accuracy                           0.93        45\n   macro avg       0.93      0.93      0.93        45\nweighted avg       0.93      0.93      0.93        45\n\n\n\nFor this project, we will use the RandomForestClassifier, a robust and versatile model that performs well with the Iris dataset."
  },
  {
    "objectID": "ML_notebook.html#k-nearest-neighbour-classifier",
    "href": "ML_notebook.html#k-nearest-neighbour-classifier",
    "title": "End-to-End Machine Learning Workflow",
    "section": "2. K-Nearest Neighbour Classifier",
    "text": "2. K-Nearest Neighbour Classifier\nTo Train and Evaluate the K-NN Model, follow these steps.\nStep -1: Import Required Libraries Here we need only the LogisticRegression instance from the sklearn library. This can be done as follows.\n\n\nCode\nfrom sklearn.neighbors import KNeighborsClassifier\n\n\nStep-2: Initialize the Model\nCreate an instance of the K-NN model:\n\n\nCode\nmodel = KNeighborsClassifier(n_neighbors=5)\n\n\nStep-3. Train the Model\nFit the model to the training data:\n\n\nCode\nmodel.fit(X_train, y_train.values.ravel())\n\n\nKNeighborsClassifier()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  KNeighborsClassifier?Documentation for KNeighborsClassifieriFittedKNeighborsClassifier() \n\n\nStep-4: Make Predictions\nUse the trained model to predict the labels for the test set:\n\n\nCode\ny_pred = model.predict(X_test)\n\n\nStep-5 Evaluate the Model\nAssess the model’s performance using confussion matrix, model accuracy and a detailed classification report:\n\n\nCode\n# Calculate accuracy\naccuracy = accuracy_score(y_test, y_pred)\n# Generate confusion matrix\nconf_matrix = confusion_matrix(y_test, y_pred)\n# Generate classification report\nreport = classification_report(y_test, y_pred)\n\n\n\n\nCode\n# Plot confusion matrix as a heatmap\nplt.figure(figsize=(6,5))\nsns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=y.columns, yticklabels=y.columns)\nplt.title('Confusion Matrix')\nplt.xlabel('Predicted Labels')\nplt.ylabel('True Labels')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\nprint(f\"Accuracy: {accuracy:.2f}\")\nprint(\"Classification Report:\")\nprint(report)\n\n\nAccuracy: 0.98\nClassification Report:\n              precision    recall  f1-score   support\n\n      Setosa       1.00      1.00      1.00        15\n  Versicolor       0.94      1.00      0.97        15\n   Virginica       1.00      0.93      0.97        15\n\n    accuracy                           0.98        45\n   macro avg       0.98      0.98      0.98        45\nweighted avg       0.98      0.98      0.98        45"
  },
  {
    "objectID": "ML_notebook.html#support-vector-machine-classifier",
    "href": "ML_notebook.html#support-vector-machine-classifier",
    "title": "End-to-End Machine Learning Workflow",
    "section": "3. Support Vector Machine Classifier",
    "text": "3. Support Vector Machine Classifier\nTo Train and Evaluate the Logistic Regression Model, follow these steps.\nStep -1: Import Required Libraries Here we need only the SVC instance from the sklearn library. This can be done as follows.\n\n\nCode\nfrom sklearn.svm import SVC\n\n\nStep-2: Initialize the Model\nCreate an instance of the SVC model:\n\n\nCode\nmodel = SVC(kernel='linear', C=1.0, random_state=seed)\n\n\nStep-3” 3. Train the Model\nFit the model to the training data:\n\n\nCode\nmodel.fit(X_train, y_train.values.ravel())\n\n\nSVC(kernel='linear', random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  SVC?Documentation for SVCiFittedSVC(kernel='linear', random_state=42) \n\n\nStep-4: Make Predictions\nUse the trained model to predict the labels for the test set:\n\n\nCode\ny_pred = model.predict(X_test)\n\n\nStep-5 Evaluate the Model\nAssess the model’s performance using confussion matrix, model accuracy and a detailed classification report:\n\n\nCode\n# Calculate accuracy\naccuracy = accuracy_score(y_test, y_pred)\n# Generate confusion matrix\nconf_matrix = confusion_matrix(y_test, y_pred)\n# Generate classification report\nreport = classification_report(y_test, y_pred)\n\n\n\n\nCode\n# Plot confusion matrix as a heatmap\nplt.figure(figsize=(6,5))\nsns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=y.columns, yticklabels=y.columns)\nplt.title('Confusion Matrix')\nplt.xlabel('Predicted Labels')\nplt.ylabel('True Labels')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\nprint(f\"Accuracy: {accuracy:.2f}\")\nprint(\"Classification Report:\")\nprint(report)\n\n\nAccuracy: 1.00\nClassification Report:\n              precision    recall  f1-score   support\n\n      Setosa       1.00      1.00      1.00        15\n  Versicolor       1.00      1.00      1.00        15\n   Virginica       1.00      1.00      1.00        15\n\n    accuracy                           1.00        45\n   macro avg       1.00      1.00      1.00        45\nweighted avg       1.00      1.00      1.00        45"
  },
  {
    "objectID": "ML_notebook.html#decision-tree-classifier",
    "href": "ML_notebook.html#decision-tree-classifier",
    "title": "End-to-End Machine Learning Workflow",
    "section": "4. Decision Tree Classifier",
    "text": "4. Decision Tree Classifier\nTo Train and Evaluate the Decision Tree Model, follow these steps.\nStep -1: Import Required Libraries Here we need only the Decision Tree instance from the sklearn library. This can be done as follows.\n\n\nCode\nfrom sklearn.tree import DecisionTreeClassifier\n\n\nStep-2: Initialize the Model\nCreate an instance of the Decision tree model:\n\n\nCode\nmodel = DecisionTreeClassifier(random_state=seed)\n\n\nStep-3. Train the Model\nFit the model to the training data:\n\n\nCode\nmodel.fit(X_train, y_train.values.ravel())\n\n\nDecisionTreeClassifier(random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  DecisionTreeClassifier?Documentation for DecisionTreeClassifieriFittedDecisionTreeClassifier(random_state=42) \n\n\nStep-4: Make Predictions\nUse the trained model to predict the labels for the test set:\n\n\nCode\ny_pred = model.predict(X_test)\n\n\nStep-5 Evaluate the Model\nAssess the model’s performance using confussion matrix, model accuracy and a detailed classification report:\n\n\nCode\n# Calculate accuracy\naccuracy = accuracy_score(y_test, y_pred)\n# Generate confusion matrix\nconf_matrix = confusion_matrix(y_test, y_pred)\n# Generate classification report\nreport = classification_report(y_test, y_pred)\n\n\n\n\nCode\n# Plot confusion matrix as a heatmap\nplt.figure(figsize=(6,5))\nsns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=y.columns, yticklabels=y.columns)\nplt.title('Confusion Matrix')\nplt.xlabel('Predicted Labels')\nplt.ylabel('True Labels')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\nprint(f\"Accuracy: {accuracy:.2f}\")\nprint(\"Classification Report:\")\nprint(report)\n\n\nAccuracy: 0.93\nClassification Report:\n              precision    recall  f1-score   support\n\n      Setosa       1.00      1.00      1.00        15\n  Versicolor       1.00      0.80      0.89        15\n   Virginica       0.83      1.00      0.91        15\n\n    accuracy                           0.93        45\n   macro avg       0.94      0.93      0.93        45\nweighted avg       0.94      0.93      0.93        45"
  },
  {
    "objectID": "ML_notebook.html#randonforest-classifier",
    "href": "ML_notebook.html#randonforest-classifier",
    "title": "End-to-End Machine Learning Workflow",
    "section": "5. RandonForest Classifier",
    "text": "5. RandonForest Classifier\nTo Train and Evaluate the RandomForest Model, follow these steps.\nStep -1: Import Required Libraries Here we need only the Random Forest instance from the sklearn library. This can be done as follows.\n\n\nCode\nfrom sklearn.ensemble import RandomForestClassifier\n\n\nStep-2: Initialize the Model\nCreate an instance of the RandomForest model:\n\n\nCode\nRf_model = RandomForestClassifier(n_estimators=100, random_state=seed)\n\n\nStep-3: Train the Model\nFit the model to the training data:\n\n\nCode\nRf_model.fit(X_train, y_train.values.ravel())\n\n\nRandomForestClassifier(random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  RandomForestClassifier?Documentation for RandomForestClassifieriFittedRandomForestClassifier(random_state=42) \n\n\nStep-4: Make Predictions\nUse the trained model to predict the labels for the test set:\n\n\nCode\ny_pred = Rf_model.predict(X_test)\n\n\nStep-5: Evaluate the Model\nAssess the model’s performance using confussion matrix, model accuracy and a detailed classification report:\n\n\nCode\n# Calculate accuracy\naccuracy = accuracy_score(y_test, y_pred)\n# Generate confusion matrix\nconf_matrix = confusion_matrix(y_test, y_pred)\n# Generate classification report\nreport = classification_report(y_test, y_pred)\n\n\n\n\nCode\n# Plot confusion matrix as a heatmap\nplt.figure(figsize=(6,5))\nsns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=y.columns, yticklabels=y.columns)\nplt.title('Confusion Matrix')\nplt.xlabel('Predicted Labels')\nplt.ylabel('True Labels')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\nprint(f\"Accuracy: {accuracy:.2f}\")\nprint(\"Classification Report:\")\nprint(report)\n\n\nAccuracy: 0.89\nClassification Report:\n              precision    recall  f1-score   support\n\n      Setosa       1.00      1.00      1.00        15\n  Versicolor       0.78      0.93      0.85        15\n   Virginica       0.92      0.73      0.81        15\n\n    accuracy                           0.89        45\n   macro avg       0.90      0.89      0.89        45\nweighted avg       0.90      0.89      0.89        45"
  },
  {
    "objectID": "ML_notebook.html#a-setting-up-streamlit",
    "href": "ML_notebook.html#a-setting-up-streamlit",
    "title": "End-to-End Machine Learning Workflow",
    "section": "6.a Setting-up Streamlit",
    "text": "6.a Setting-up Streamlit\n1. Prepare the Environment: In this step install the streamlit library using folowing code.\npython -m pip install streamlite"
  },
  {
    "objectID": "ML_notebook.html#b-set-up-source-code-for-model-selection",
    "href": "ML_notebook.html#b-set-up-source-code-for-model-selection",
    "title": "End-to-End Machine Learning Workflow",
    "section": "6.b Set-up source code for Model selection",
    "text": "6.b Set-up source code for Model selection\n2. Create the source code to load the trained model-model.py:\nThis .py file is used to load the trained model and handle predictions.\n# model.py\n\nimport joblib\n\ndef load_model():\n    \"\"\"Load the trained Random Forest model from a file.\"\"\"\n    model = joblib.load('rf_model.sav')\n    return model"
  },
  {
    "objectID": "ML_notebook.html#c-set-up-source-code-for-prediction",
    "href": "ML_notebook.html#c-set-up-source-code-for-prediction",
    "title": "End-to-End Machine Learning Workflow",
    "section": "6.c Set-up source code for Prediction",
    "text": "6.c Set-up source code for Prediction\n3. Create prediction.py:\nThis .py file handles the prediction logic, using the loaded model to make predictions based on input data. The source code for this job is given below.\n\n# File name: prediction.py\nfrom model import load_model\nimport pandas as pd\n\ndef predict(data):\n    \"\"\"Predict the class of iris based on input features.\"\"\"\n    model = load_model()\n    return model.predict(data)"
  },
  {
    "objectID": "ML_notebook.html#d-set-up-source-code-for-ml-application",
    "href": "ML_notebook.html#d-set-up-source-code-for-ml-application",
    "title": "End-to-End Machine Learning Workflow",
    "section": "6.d Set-up source code for ML application",
    "text": "6.d Set-up source code for ML application\n4. Creating the app.py:\nThis is the main Streamlit application file. It provides the user interface for inputting data and displaying predictions.\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nfrom prediction import predict\n\n\nst.title('Classifying Iris Flowers')\nst.markdown('Toy model to play to classify iris flowers into \\\n     (setosa, versicolor, virginica) based on their sepal/petal \\\n    and length/width.')\n\nst.header(\"Plant Features\")\ncol1, col2 = st.columns(2)\n\nwith col1:\n    st.text(\"Sepal characteristics\")\n    sepal_l = st.slider('Sepal lenght (cm)', 1.0, 8.0, 0.5)\n    sepal_w = st.slider('Sepal width (cm)', 2.0, 4.4, 0.5)\n\nwith col2:\n    st.text(\"Pepal characteristics\")\n    petal_l = st.slider('Petal lenght (cm)', 1.0, 7.0, 0.5)\n    petal_w = st.slider('Petal width (cm)', 0.1, 2.5, 0.5)\n\nst.text('')\nif st.button(\"Predict type of Iris\"):\n    result = predict(\n        np.array([[sepal_l, sepal_w, petal_l, petal_w]]))\n    st.text(result[0])\n\n\nst.text('')\nst.text('')\nst.markdown(\n    '`Create by` [Intel-Unnati](https://sijuswamy.github.io/mywebsite/) | \\\n         `Code:` [GitHub](https://github.com/sijuswamy)')"
  },
  {
    "objectID": "ML_notebook.html#e-running-the-application-in-localhost",
    "href": "ML_notebook.html#e-running-the-application-in-localhost",
    "title": "End-to-End Machine Learning Workflow",
    "section": "6.e Running the application in localhost",
    "text": "6.e Running the application in localhost\n5. Run the Streamlit App:\nNavigate to the directory containing your files and run the Streamlit app using the following command:\npython streamlit run app.py\nThis command will start a local web server and open the application in your default web browser. You can input the iris flower measurements and get the predicted variety.\n\n\n\n\n\n\nTip\n\n\n\n\nYou just open the VScode editor\nCreate a folder\nCreate a virtual environment\nActivate virtual environment\nInstall the required libraries using pip install -r requirements.txt in the powershell or command prompt\nCreate the .py file model.py and populate the content of model.py code chunk.\nCrate the .py file prediction.py and populate the content of prediction.py code chunk.\nCreate the .py file app.py and populate the content of app.py code chunk.\nRun the .py file in the command prompt or powershell using the command streamlit run app.py.\nNow you will be redirected to a localhost port and the site will be published locally."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ML-project",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  }
]